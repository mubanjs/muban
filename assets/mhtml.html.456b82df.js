import{r as e,o,c as l,b as n,d as t,F as c,e as s,a as p}from"./app.7a437beb.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const u={},r=n("h1",{id:"mhtml-templates",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mhtml-templates","aria-hidden":"true"},"#"),s(" mhtml templates")],-1),k=n("h2",{id:"html",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#html","aria-hidden":"true"},"#"),s(" html")],-1),d=n("p",null,"The tagged template string function you can use to render any HTML and include variables as part of tag-names, attributes and content.",-1),g=s("Check out "),m={href:"https://github.com/developit/htm",target:"_blank",rel:"noopener noreferrer"},b=s("htm"),h=s(" and "),v={href:"https://github.com/developit/vhtml",target:"_blank",rel:"noopener noreferrer"},f=s("vhtml"),y=s(" for more information. Although most examples use JSX, the supported features are pretty much the same."),_=p(`<h3 id="basic-variables" tabindex="-1"><a class="header-anchor" href="#basic-variables" aria-hidden="true">#</a> Basic variables</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> html <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@muban/template&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> tag <span class="token operator">=</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> className <span class="token operator">=</span> <span class="token string">&#39;is-active&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>

html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> class=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>className<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>is-active<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="include-partial-templates" tabindex="-1"><a class="header-anchor" href="#include-partial-templates" aria-hidden="true">#</a> Include partial templates</h3><p>Just calling the child template function:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">ItemTemplate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> label <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">ListTemplate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> items <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;ul&gt;
    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token function">ItemTemplate</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
  &lt;/u&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>As can be seen, looping over items can just be done using <code>Array.map</code> and returning an array of rendered template strings.</p><h3 id="spreading" tabindex="-1"><a class="header-anchor" href="#spreading" aria-hidden="true">#</a> Spreading</h3><p>Spreading is supported:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;p ...</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="tag-component" tabindex="-1"><a class="header-anchor" href="#tag-component" aria-hidden="true">#</a> Tag component</h3>`,11),x=s("If the "),w=n("code",null,"tag",-1),T=s(" variable is a function, it gets called as a "),$={href:"https://github.com/developit/vhtml#new-sortof-components",target:"_blank",rel:"noopener noreferrer"},H=s('"sort of"'),j=s(' "component".'),I=p(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Item</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;
    &lt;h4&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h4&gt;
    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
  &lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;foo&quot;&gt;
    &lt;h1&gt;Hi!&lt;/h1&gt;
    &lt;ul&gt;
      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ...</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">{</span> item<span class="token punctuation">,</span> index <span class="token punctuation">}</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;
          This is item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!
        &lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
    &lt;/ul&gt;
  &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="unsafehtml" tabindex="-1"><a class="header-anchor" href="#unsafehtml" aria-hidden="true">#</a> unsafeHTML</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">unsafeHTML</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>By default, every variable in the template string is considered unsafe and will be escaped. To opt-out here, we can use the <code>unsafeHTML</code> helper.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> html<span class="token punctuation">,</span> unsafeHTML <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@muban/muban&#39;</span>

<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">&#39;Hello &lt;strong&gt;world&lt;/strong&gt;!&#39;</span><span class="token punctuation">;</span>

html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
  &lt;p&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;
  &lt;p&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">unsafeHTML</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello <span class="token entity named-entity" title="&lt;">&amp;lt;</span>strong<span class="token entity named-entity" title="&gt;">&amp;gt;</span>world<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/strong<span class="token entity named-entity" title="&gt;">&amp;gt;</span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Another way to render raw HTML is use the <code>dangerouslySetInnerHTML</code> option from React. In most scenarios this shouldn&#39;t be needed, unless you want to add content that is not valid HTML into an element that can render other things (like script tags - see <a href="#jsonScriptTemplate"><code>jsonScriptTemplate</code></a> below).</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">&#39;Hello &lt;strong&gt;world&lt;/strong&gt;!&#39;</span><span class="token punctuation">;</span>

html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
  &lt;p dangerouslySetInnerHTML=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">{</span>
    __html<span class="token operator">:</span> content<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;&lt;/p&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="jsonscripttemplate" tabindex="-1"><a class="header-anchor" href="#jsonscripttemplate" aria-hidden="true">#</a> jsonScriptTemplate</h2><p>In muban, it&#39;s supported to read component property from a JSON script tag, mostly used when the data is too much to fit nicely into data- attributes.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">jsonScriptTemplate</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Example</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">jsonScriptTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isExpanded<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>application/json<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token punctuation">{</span> <span class="token string-property property">&quot;isExpanded&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,14);function L(S,q){const a=e("ExternalLinkIcon");return o(),l(c,null,[r,k,d,n("p",null,[g,n("a",m,[b,t(a)]),h,n("a",v,[f,t(a)]),y]),_,n("p",null,[x,w,T,n("a",$,[H,t(a)]),j]),I],64)}var E=i(u,[["render",L]]);export{E as default};
