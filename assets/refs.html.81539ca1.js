import{r as c,o as l,c as i,d as s,w as a,F as r,a as o,e,b as n}from"./app.7a437beb.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const d={},m=o(`<h1 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h1><p>Refs have two stages, the definitions - which go inside your component definition, and the resolved items - which you receive in your setup function, and use for bindings.</p><h2 id="ref-definition" tabindex="-1"><a class="header-anchor" href="#ref-definition" aria-hidden="true">#</a> Ref definition</h2><p>The shape of the definition that you pass to the component is the following:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// refs definition</span>
<span class="token keyword">type</span> <span class="token class-name">ComponentRefItem</span> <span class="token operator">=</span>
  <span class="token comment">// shortcut for element ref, will internally be turned into a \`refElement()\`</span>
  <span class="token operator">|</span> <span class="token builtin">string</span>
  <span class="token operator">|</span> <span class="token punctuation">{</span>
      <span class="token comment">// Different refs have their own type, to execute slightly different logic on them.</span>
      type<span class="token operator">:</span> <span class="token string">&#39;element&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;collection&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;component&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;componentCollection&#39;</span><span class="token punctuation">;</span>
      <span class="token comment">// The value of the \`data-ref\` attribute on the html element(s).</span>
      ref<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
      <span class="token comment">// Only used for element/component, and when true, it will log an error if the element</span>
      <span class="token comment">// doesn&#39;t exist in the DOM. Nothing will break, it&#39;s just that the bindings will not</span>
      <span class="token comment">// be executed.</span>
      isRequired<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
      <span class="token comment">// A function that will find the right HTMLElement(s) that should be used for the refs.</span>
      <span class="token comment">// When \`type\` is element or component, it returns a single HTMLElement or null.</span>
      <span class="token function-variable function">queryRef</span><span class="token operator">:</span> <span class="token punctuation">(</span>parent<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>However, you would never pass this by hand, but instead make use of the available helper functions described below.</p><p><strong>ignoreGuard</strong></p><p>By default, only refs directly within a component can be selected. Refs from child components are not accessible. All <code>ref</code> functions have an <code>ignoreGuard</code> option.</p><p>When setting <code>ignoreGuard</code> to true, it disables the guarding behaviour, and allows you to query any ref.</p><h3 id="refelement" tabindex="-1"><a class="header-anchor" href="#refelement" aria-hidden="true">#</a> refElement</h3><p><code>refElement</code> selects a single DOM element that has the <code>data-ref</code> attribute set.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">refElement</span><span class="token punctuation">(</span>
  refIdOrQuery<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    isRequired<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    ignoreGuard<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ComponentRefItemElement<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="refidorquery" tabindex="-1"><a class="header-anchor" href="#refidorquery" aria-hidden="true">#</a> refIdOrQuery</h4><p><code>refId: string</code></p><p><code>refQuery: (parent: HTMLElement) =&gt; HTMLElement | null)</code></p><p>When passing a <code>string</code>, it&#39;s the value of the <code>data-ref</code> attribute on one of the HTMLElements in the DOM.</p><p>When passing a <code>function</code>, you can query your elements by using <code>parent.querySelector(...)</code> to return a single element.</p><p>Any elements that are queried are filtered against the component guard unless <code>options. ignoreGuard</code> is set to <code>true</code>.</p><h4 id="options-isrequired" tabindex="-1"><a class="header-anchor" href="#options-isrequired" aria-hidden="true">#</a> options.isRequired</h4><p><code>isRequired?: boolean = true</code></p><p>By default, all refs are marked as <strong>required</strong>, and will log errors in the console when they cannot be found. If elements are optional, you can set <code>isRequired</code> to <code>false</code>, and by doing that, the type becomes optional as well.</p><h4 id="options-ignoreguard" tabindex="-1"><a class="header-anchor" href="#options-ignoreguard" aria-hidden="true">#</a> options.ignoreGuard</h4><p><code>ignoreGuard?: boolean = false</code></p><p>When set to <code>true</code>, it disables the guarding behaviour, and allows you to query any ref of any child component.</p><p><strong>Example</strong></p>`,25),k=e(" ```ts{4-9} defineComponent({ // ... refs: { // the easiest way to use this, when not providing options shortcut: 'single-element', // being more explicit, by default ref is required requiredElement: refElement('single-element'), // making this ref optional optionalElement: refElement('single-element', { isRequired: false }), }, // ... }) ``` "),h=e(" ```html{2} "),b=n("div",null,[n("div",{"data-ref":"single-element"},"item")],-1),f=e(" ``` "),g=o(`<div class="custom-container tip"><p class="custom-container-title">Shortcut</p><p>Passing <code>&#39;string&#39;</code> is a quick shortcut for <code>refElement(&#39;string&#39;)</code>.</p></div><h3 id="refcollection" tabindex="-1"><a class="header-anchor" href="#refcollection" aria-hidden="true">#</a> refCollection</h3><p><code>refCollection</code> selects one or more DOM elements that have the <code>data-ref</code> attribute set. If no elements are found, the collection will be empty.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">refCollection</span><span class="token punctuation">(</span>
  refIdOrQuery<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    minimumItemsRequired<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    ignoreGuard<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ComponentRefItemCollection<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>In the <code>setup</code> function, a collection can be used to apply the same binding to multiple items, or to loop over in a mapping function and specify a different binding based on each individual element or index in the collection.</p><h4 id="refidorquery-1" tabindex="-1"><a class="header-anchor" href="#refidorquery-1" aria-hidden="true">#</a> refIdOrQuery</h4><p><code>refId: string</code></p><p><code>refQuery: (parent: HTMLElement) =&gt; Array&lt;HTMLElement&gt;)</code></p><p>When passing a <code>string</code>, it&#39;s the value of the <code>data-ref</code> attribute on one or multiple HTMLElements in the DOM.</p><p>When passing a <code>function</code>, you can query your elements by using <code>parent.querySelectorAll(...)</code> to return one or multiple elements.</p><p>Any elements that are queried are filtered against the component guard unless <code>options. ignoreGuard</code> is set to <code>true</code>.</p><h4 id="options-minimumitemsrequired" tabindex="-1"><a class="header-anchor" href="#options-minimumitemsrequired" aria-hidden="true">#</a> options.minimumItemsRequired</h4><p><code>minimumItemsRequired?: number = 0</code></p><p>By default, the returned collection can be empty, and is thus optional by default. By setting <code>minimumItemsRequired</code> to a specific value, an error is thrown when the collection contains fewer items.</p><h4 id="options-ignoreguard-1" tabindex="-1"><a class="header-anchor" href="#options-ignoreguard-1" aria-hidden="true">#</a> options.ignoreGuard</h4><p><code>ignoreGuard?: boolean = false</code></p><p>When set to <code>true</code>, it disables the guarding behaviour, and allows you to query any ref of any child component.</p><p><strong>Example</strong></p>`,18),y=e(" ```ts{4-7} defineComponent({ // ... refs: { // select all `data-ref=item`, the resulting collection contains 0 or more items items: refCollection('item'), // expect at least 3 items to be available in the DOM, otherwise an error is thrown items: refCollection('item', { minimumItemsRequired: 3 }), }, // ... }) ``` "),v=e(" ```html{3-5} "),w=n("div",null,[n("ul",null,[n("li",{"data-ref":"item"},"item 1"),n("li",{"data-ref":"item"},"item 2"),n("li",{"data-ref":"item"},"item 3")])],-1),C=e(" ``` "),_=o(`<h3 id="refcomponent" tabindex="-1"><a class="header-anchor" href="#refcomponent" aria-hidden="true">#</a> refComponent</h3><p><code>refComponent</code> selects a single DOM element that either has the <code>data-component</code> attribute match the one from the passed Component, or has the <code>data-ref</code> attribute set when that is provided in the options.</p><p>After selecting the DOM element, it will create a new component instance for that element.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">refComponent</span><span class="token punctuation">(</span>
  component<span class="token operator">:</span> ComponentFactory <span class="token operator">|</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ComponentFactory<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ref<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    isRequired<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    ignoreGuard<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ComponentRefItemComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> component</h4><p><code>component: ComponentFactory | Array&lt;ComponentFactory&gt;</code></p><p>One or multiple components that will be created for this ref. In addition to almost all HTML bindings, a component ref also allows you to bind against child component props, updating their values when things change, or providing callback functions that can be called.</p><p>If <code>options.refIdOrQuery</code> is not passed, it will search for the first occurrence of the <code>data-component</code> matching the passed component(s).</p><p>If you pass an <code>Array</code> of multiple components, it will use the first one it finds. The most common use case is by having one element with a specific <code>data-ref</code> that should match one of the passed components.</p><p>When doing that, only the component props that exists on all the passed components can be used to bind against.</p><h4 id="options-ref" tabindex="-1"><a class="header-anchor" href="#options-ref" aria-hidden="true">#</a> options.ref</h4><p><code>ref: string</code></p><p><code>ref: (parent: HTMLElement) =&gt; HTMLElement | null)</code></p><p>If you have multiple component elements, and the ref should target a specific one, the <code>ref</code> can be used. Or if you just want to be more strict about things, to make sure it doesn&#39;t break in the future. Otherwise, if you just have a single child component, you can omit the ref, and it still will be able to find the element based on the <code>data-component</code> attribute.</p><p>When passing a <code>string</code>, it&#39;s the value of the <code>data-ref</code> attribute on one of the HTMLElements in the DOM.</p><p>When passing a <code>function</code>, you can query your elements by using <code>parent.querySelector(...)</code> to return a single element.</p><p>Any elements that are queried are filtered against the component guard unless <code>options. ignoreGuard</code> is set to <code>true</code>.</p><p>Any elements that are queried are also filtered with the <code>data-component</code> attribute against the <code>displayName</code> of the passed <code>ComponentFactory</code>.</p><h4 id="options-isrequired-1" tabindex="-1"><a class="header-anchor" href="#options-isrequired-1" aria-hidden="true">#</a> options.isRequired</h4><p><code>isRequired?: boolean = true</code></p><p>By default, all refs are marked as <strong>required</strong>, and will log errors in the console when they cannot be found. If elements are optional, you can set <code>isRequired</code> to <code>false</code>, and by doing that, the type becomes optional as well.</p><h4 id="options-ignoreguard-2" tabindex="-1"><a class="header-anchor" href="#options-ignoreguard-2" aria-hidden="true">#</a> options.ignoreGuard</h4><p><code>ignoreGuard?: boolean = false</code></p><p>When set to <code>true</code>, it disables the guarding behaviour, and allows you to query any ref of any child component.</p><p><strong>Example</strong></p>`,25),q=e(" ```ts{4-16} defineComponent({ // ... refs: { // there is just one button requiredComponent: refComponent(Button), optionalComponent: refComponent(Button, { isRequired: false }), // there are multiple buttons, target specific one acceptButton: refComponent(Button, { ref: 'accept-button' }), cancelButton: refComponent(Button, { ref: 'cancel-button', isRequired: false }), // the component can either be a Button or a Link someButton: refComponent([Button, Link], { ref: 'some-button' }), // select the icon _inside_ the Button, using a custom querySelector and the ignoreGuard buttonIcon: refComponent(Icon, { ref: parent => parent.querySelector('[data-ref=\"some-button\"] [data-ref=\"icon\"]'), ignoreGuard: true, }), }, // ... }) ``` "),x=e(" ```html{2-4} "),E=n("div",null,[n("button",{"data-component":"button"},"click me"),n("button",{"data-component":"button","data-ref":"accept-button"},"accept"),n("button",{"data-component":"button","data-ref":"cancel-button"},"cancel")],-1),M=e(" ``` "),T=o(`<h3 id="refcomponents" tabindex="-1"><a class="header-anchor" href="#refcomponents" aria-hidden="true">#</a> refComponents</h3><p><code>refComponents</code> selects one or more DOM elements that either have the <code>data-component</code> attribute match the one from the passed Component, or have the <code>data-ref</code> attribute set when that is provided in the options. If no elements are found, the collection will be empty.</p><p>After selecting the DOM elements, it will create a new component instance for each of them.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">refComponents</span><span class="token punctuation">(</span>
  component<span class="token operator">:</span> ComponentFactory<span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ref<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TMLElement<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    minimumItemsRequired<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    ignoreGuard<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ComponentRefItemComponentCollection<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="component-1" tabindex="-1"><a class="header-anchor" href="#component-1" aria-hidden="true">#</a> component</h4><p><code>component: ComponentFactory</code></p><p>The component that will be created for this ref. In addition to almost all HTML bindings, a component ref also allows you to bind against child component props, updating their values when things change, or providing callback functions that can be called.</p><p>If <code>options.ref</code> is not passed, it will search for the first occurrence of the <code>data-component</code> matching the passed component.</p><h4 id="options-ref-1" tabindex="-1"><a class="header-anchor" href="#options-ref-1" aria-hidden="true">#</a> options.ref</h4><p><code>ref: string</code></p><p><code>ref: (parent: HTMLElement) =&gt; HTMLElement | null)</code></p><p>If you have multiple component elements, and the ref should target specific ones, the <code>ref</code> can be used. Or if you just want to be more strict about things, to make sure it doesn&#39;t break in the future. Otherwise, if you just want to target all elements of this component, you can omit the ref, and it still will use all element based on the <code>data-component</code> attribute.</p><p>When passing a <code>string</code>, it&#39;s the value of the <code>data-ref</code> attribute on the HTMLElements in the DOM.</p><p>When passing a <code>function</code>, you can query your elements by using <code>parent.querySelectorAll(...)</code> to return multiple elements.</p><p>Any elements that are queried are filtered against the component guard unless <code>options. ignoreGuard</code> is set to <code>true</code>.</p><p>Any elements that are queried are also filtered with the <code>data-component</code> attribute against the <code>displayName</code> of the passed <code>ComponentFactory</code>.</p><h4 id="options-minimumitemsrequired-1" tabindex="-1"><a class="header-anchor" href="#options-minimumitemsrequired-1" aria-hidden="true">#</a> options.minimumItemsRequired</h4><p><code>minimumItemsRequired?: number = 0</code></p><p>By default, the returned collection can be empty, and is thus optional by default. By setting <code>minimumItemsRequired</code> to a specific value, an error is thrown when the collection contains fewer items.</p><h4 id="options-ignoreguard-3" tabindex="-1"><a class="header-anchor" href="#options-ignoreguard-3" aria-hidden="true">#</a> options.ignoreGuard</h4><p><code>ignoreGuard?: boolean = false</code></p><p>When set to <code>true</code>, it disables the guarding behaviour, and allows you to query any ref of any child component.</p><p><strong>Example</strong></p>`,23),R=e(" ```ts{4-6} defineComponent({ // ... refs: { allCards: refComponents(Card), heroCards: refComponent(Card, { ref: 'card-hero' }), normalCards: refComponent(Card, { ref: 'card-normal' }), }, // ... }) ``` "),I=e(" ```html{2-4,6-8} "),H=n("div",null,[n("div",{"data-component":"card","data-ref":"card-hero"},"hero card 1"),n("div",{"data-component":"card","data-ref":"card-hero"},"hero card 2"),n("div",{"data-component":"card","data-ref":"card-hero"},"hero card 3"),n("div",{"data-component":"card","data-ref":"card-normal"},"card 1"),n("div",{"data-component":"card","data-ref":"card-normal"},"card 2"),n("div",{"data-component":"card","data-ref":"card-normal"},"card 3")],-1),L=e(" ``` "),A=o(`<h2 id="ref-item" tabindex="-1"><a class="header-anchor" href="#ref-item" aria-hidden="true">#</a> Ref item</h2><p>Ref items are &quot;container objects&quot; around the resolved ref definitions to be used in the <code>setup</code> function of the component.</p><p>They are mainly used in the different binding helpers, but contains some additional information about the specific refs that could be useful in some situations.</p><p>The <code>type</code> of each <code>ref</code> is inferred from the input you pass, so the properties you can access is different between elements and components, or single items vs collections.</p><p>The public API for each type of ref can be seen below (note that some internal fields have been omitted here).</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ElementRef</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  element<span class="token operator">:</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">CollectionRef<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// this is a function, and has refs inside, so causes \`watch\` or \`watchEffect\` to re-execute </span>
  <span class="token comment">// when the DOM updates and the items inside the collection change </span>
  <span class="token function-variable function">getElements</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token comment">// nested refs for each single individual element</span>
  <span class="token function-variable function">getRefs</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ElementRef<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ComponentRef</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  component<span class="token operator">:</span> ComponentApi <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ComponentsRef</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// this is a function, and has refs inside, so causes \`watch\` or \`watchEffect\` to re-execute </span>
  <span class="token comment">// when the DOM updates and the items inside the collection change </span>
  <span class="token function-variable function">getComponents</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ComponentApi<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token comment">// nested refs for each single individual component</span>
  <span class="token function-variable function">getRefs</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ComponentRef<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>As you can see, all 4 have a reference to the actual item(s) that they have selected as <code>element</code>, <code>getElements()</code>, <code>component</code> or <code>getComponents()</code>. The two collection refs have access to the &quot;item&quot; <code>refs</code>, a list of &quot;container refs&quot; around each item in the collection, which could be useful when applying the individual bindings to each item.</p><p><strong>Example</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  refs<span class="token operator">:</span> <span class="token punctuation">{</span>
    singleElement<span class="token operator">:</span> <span class="token function">refElement</span><span class="token punctuation">(</span><span class="token string">&#39;single-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    elementCollection<span class="token operator">:</span> <span class="token function">refCollection</span><span class="token punctuation">(</span><span class="token string">&#39;element-collection&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    singleComponent<span class="token operator">:</span> <span class="token function">refElement</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token string">&#39;single-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    componentCollection<span class="token operator">:</span> <span class="token function">refElement</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token string">&#39;element-collection&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props<span class="token punctuation">,</span> refs <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    refs<span class="token punctuation">.</span>singleElement<span class="token punctuation">.</span>element<span class="token punctuation">;</span> <span class="token comment">// HTMLElement</span>
    refs<span class="token punctuation">.</span>elementCollection<span class="token punctuation">.</span><span class="token function">getElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Array&lt;HTMLElement&gt;</span>

    refs<span class="token punctuation">.</span>singleComponent<span class="token punctuation">.</span>component<span class="token punctuation">;</span> <span class="token comment">// ComponentApi</span>
    refs<span class="token punctuation">.</span>singleComponent<span class="token punctuation">.</span>component<span class="token punctuation">.</span>props<span class="token punctuation">;</span> <span class="token comment">// Access the component props, useful for intial state</span>
    refs<span class="token punctuation">.</span>componentCollection<span class="token punctuation">.</span><span class="token function">getComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Array&lt;ComponentApi&gt;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token function">bind</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>singleElement<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;label&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// bind to single element</span>
      <span class="token function">bind</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>elementCollection<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;label&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// bind to all elements in the collection</span>
      
      <span class="token comment">// bind to each ref individually</span>
      <span class="token operator">...</span>refs<span class="token punctuation">.</span>elementCollection<span class="token punctuation">.</span>refs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">bind</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// but simpler</span>
      <span class="token operator">...</span><span class="token function">bindMap</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>elementCollection<span class="token punctuation">,</span> <span class="token punctuation">(</span>ref<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      

      <span class="token comment">// bind to single component, or to all components int the collection</span>
      <span class="token function">bind</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>component<span class="token punctuation">,</span> <span class="token punctuation">{</span> someProps<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">onSomethingHappens</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Yo&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">bind</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>elementCollection<span class="token punctuation">,</span> <span class="token punctuation">{</span> someProps<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">onSomethingHappens</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Yo&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      
      <span class="token comment">// bind to each ref individually</span>
      <span class="token operator">...</span>refs<span class="token punctuation">.</span>singleComponent<span class="token punctuation">.</span>refs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">bind</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">{</span> itemIndex<span class="token operator">:</span> index <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// but simpler</span>
      <span class="token operator">...</span><span class="token function">bindMap</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>componentCollection<span class="token punctuation">,</span> <span class="token punctuation">(</span>ref<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> itemIndex<span class="token operator">:</span> index <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>`,9);function O(G,B){const t=c("code-block"),p=c("code-group");return l(),i(r,null,[m,s(p,null,{default:a(()=>[s(t,{title:"Component"},{default:a(()=>[k]),_:1}),s(t,{title:"Template"},{default:a(()=>[h,b,f]),_:1})]),_:1}),g,s(p,null,{default:a(()=>[s(t,{title:"Component"},{default:a(()=>[y]),_:1}),s(t,{title:"Template"},{default:a(()=>[v,w,C]),_:1})]),_:1}),_,s(p,null,{default:a(()=>[s(t,{title:"Component"},{default:a(()=>[q]),_:1}),s(t,{title:"Template"},{default:a(()=>[x,E,M]),_:1})]),_:1}),T,s(p,null,{default:a(()=>[s(t,{title:"Component"},{default:a(()=>[R]),_:1}),s(t,{title:"Template"},{default:a(()=>[I,H,L]),_:1})]),_:1}),A],64)}var F=u(d,[["render",O]]);export{F as default};
