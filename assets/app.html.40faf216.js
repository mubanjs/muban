import{a as n}from"./app.7a437beb.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="app" tabindex="-1"><a class="header-anchor" href="#app" aria-hidden="true">#</a> App</h1><p>Although components can be initialized individually, in most cases you want to start by creating a Muban app first.</p><h2 id="createapp" tabindex="-1"><a class="header-anchor" href="#createapp" aria-hidden="true">#</a> createApp</h2><p>The <code>createApp</code> is the default starting point for almost all Muban applications, allowing you to:</p><ul><li>specify the root component</li><li><code>mount</code> the app into the DOM</li><li>register global <code>components</code> that should be instantiated automatically whenever they are found in the DOM</li><li><code>provide</code> global &quot;context&quot; values</li></ul><h3 id="mount" tabindex="-1"><a class="header-anchor" href="#mount" aria-hidden="true">#</a> mount</h3><p>The basic app creation is as follows:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@muban/muban&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// create your App with your root component</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// query your container in the DOM</span>
<span class="token keyword">const</span> appRoot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// mount the app into the container</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>appRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="development-templates" tabindex="-1"><a class="header-anchor" href="#development-templates" aria-hidden="true">#</a> Development templates</h4><p>During development, when a server is not available yet to render your templates, you can choose to render your templates in the container as part of the mounting process.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@muban/muban&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// create your App with your root component</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// query your container in the DOM</span>
<span class="token keyword">const</span> appRoot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// mount the app into the container</span>
<span class="token comment">// it will also render the \`myComponentTemplate\` in the dom using the values passed</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>appRoot<span class="token punctuation">,</span> myComponentTemplate<span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Hello World!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="components" tabindex="-1"><a class="header-anchor" href="#components" aria-hidden="true">#</a> components</h3><p>If you have global components that should be instantiated automatically without explicitly providing them as part of any other components, you can register them on the <code>App</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// register a single component</span>
app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>ToggleExpand<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// register a lazy component</span>
app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>
  <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token string">&#39;lazy-test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./LazyTest&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or register multiple at the same time</span>
app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>
  ToggleExpand<span class="token punctuation">,</span>
  <span class="token function">lazy</span><span class="token punctuation">(</span>
    <span class="token string">&#39;product-card&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../filter-products/FilterProducts.card&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token string">&#39;lazy-test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./LazyTest&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="provide" tabindex="-1"><a class="header-anchor" href="#provide" aria-hidden="true">#</a> provide</h3><p>In most cases your root component will <code>provide</code> objects to the rest of your app, but you can also provide the values directly to your <code>App</code> itself.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// provides an instance of an \`SomeGlobalState\` object under the \`some-key\`</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;some-key&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomeGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">// in any other component, just inject the value to use it</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;some-key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,17);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
