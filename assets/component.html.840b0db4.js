import{r as o,o as c,c as l,b as e,d as p,w as t,F as r,a as s,e as n}from"./app.7a437beb.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const u={},k=s(`<h1 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> Component</h1><p>The Component API consists of a single function, which is responsible for defining your components.</p><p>Most other APIs are used &quot;inside&quot; the component definition.</p><h2 id="definecomponent" tabindex="-1"><a class="header-anchor" href="#definecomponent" aria-hidden="true">#</a> defineComponent</h2><p><code>defineComponent</code> is a factory function, taking in a configuration object, and returning a function that can be used to initialize your component when receiving the right HTML element.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// definition</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span>options<span class="token operator">:</span> DefineComponentOptions<span class="token punctuation">)</span><span class="token operator">:</span> ComponentFactory<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>In short, the usage looks like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// usage</span>
<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The options you can pass to the component are the <code>name</code>, <code>props</code> and <code>refs</code>, and the <code>setup</code> function that should return a list of <code>Binding</code> definitions.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// options defintion</span>
<span class="token keyword">type</span> <span class="token class-name">DefineComponentOptions<span class="token operator">&lt;</span>
  <span class="token constant">P</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> PropTypeDefinition<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token constant">R</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ComponentRefItem<span class="token operator">&gt;</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  props<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">;</span>
  refs<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">;</span>
  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    props<span class="token operator">:</span> TypedProps<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    refs<span class="token operator">:</span> TypedRefs<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    context<span class="token operator">:</span> <span class="token punctuation">{</span> element<span class="token operator">:</span> HTMLElement <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Binding<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>The return type of the <code>defineComponent</code> is the object that your application will interact with, since it&#39;s the thing that will be exported from your source file.</p><p>If you call it with an HTML element that has a <code>data-component</code> attribute that matches up with the component&#39;s configured name, it will create a component instance and returns an &quot;instance API&quot; to interact with.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Factory return definition</span>
<span class="token keyword">type</span> <span class="token class-name">ComponentFactory</span> <span class="token operator">=</span>
  <span class="token comment">// the &quot;constructor&quot; function, returning the &quot;instance API&quot;</span>
  <span class="token punctuation">(</span> element<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// component name on the instance</span>
    <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token comment">// API to update the component props from the outside</span>
    <span class="token function-variable function">setProps</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">// object to read the component props</span>
    <span class="token keyword">readonly</span> props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">;</span>
    <span class="token comment">// reference to the component&#39;s HTML element</span>
    <span class="token keyword">readonly</span> element<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>
    <span class="token comment">// a dispose function, if you want to manually remove this component</span>
    <span class="token comment">// otherwise it will automatically get disposed when removing the HTML element from the DOM</span>
    <span class="token function-variable function">dispose</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
  <span class="token comment">// and the display name available on the function</span>
  <span class="token operator">&amp;</span> <span class="token punctuation">{</span> displayName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>A simple usage would look like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// usage</span>
<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    activeIndex<span class="token operator">:</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  refs<span class="token operator">:</span> <span class="token punctuation">{</span>
    container<span class="token operator">:</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;element&#39;</span><span class="token punctuation">,</span> ref<span class="token operator">:</span> <span class="token string">&#39;container&#39;</span><span class="token punctuation">,</span> optional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props<span class="token punctuation">,</span> refs<span class="token punctuation">,</span> element <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token function">bind</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>container<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> props<span class="token punctuation">.</span>activeIndex <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// props definition</span>
<span class="token keyword">type</span> <span class="token class-name">PropTypeDefinition<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// the property type, used to convert the property to the right datatype</span>
  type<span class="token operator">:</span> <span class="token keyword">typeof</span> Number <span class="token operator">|</span> <span class="token keyword">typeof</span> String <span class="token operator">|</span> <span class="token keyword">typeof</span> Boolean <span class="token operator">|</span> <span class="token keyword">typeof</span> Date <span class="token operator">|</span> <span class="token keyword">typeof</span> <span class="token builtin">Array</span> <span class="token operator">|</span> <span class="token keyword">typeof</span> Object <span class="token operator">|</span> <span class="token keyword">typeof</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
  <span class="token comment">// an optional default value for when the property is not available</span>
  <span class="token keyword">default</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Primitive</span> <span class="token operator">?</span> <span class="token function-variable function">T</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token comment">// an optional predicate that will reject the prop if not valid</span>
  validator<span class="token operator">?</span><span class="token operator">:</span> Predicate<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token comment">// when present, mark this prop as optional, so it doesn&#39;t have to be available in the HTML</span>
  isOptional<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">// when present, mark this prop as potentially having a missing value, typing it as \`| undefined\`</span>
  missingValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">// provide the shape of any prop when it&#39;s a function</span>
  shapeType<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Luckily there are helper functions available to easily define the properties without having to provide these objects yourself.</p>`,18),m=n("You can find more info at the "),b=n("Props API"),d=s(`<h3 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> refs</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// refs definition</span>
<span class="token keyword">type</span> <span class="token class-name">ComponentRefItem</span> <span class="token operator">=</span>
  <span class="token comment">// shortcut for element ref</span>
  <span class="token operator">|</span> <span class="token builtin">string</span>
  <span class="token operator">|</span> <span class="token punctuation">{</span>
      <span class="token comment">// different refs have their own type, to execute slightly different logic on them</span>
      type<span class="token operator">:</span> <span class="token string">&#39;element&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;collection&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;component&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;componentCollection&#39;</span><span class="token punctuation">;</span>
      <span class="token comment">// the value of the \`data-ref\` attribute on the html element(s)</span>
      ref<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
      <span class="token comment">// only used for element/component, and when true, it will log an error if the element</span>
      <span class="token comment">// doesn&#39;t exist in the DOM. Nothing will break, it&#39;s just that the bindings will not</span>
      <span class="token comment">// be executed  </span>
      isRequired<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
      <span class="token comment">// A function that will find the right HTMLElement(s) that should be used for the refs.</span>
      <span class="token comment">// When \`type\` is element or component, it returns a single HTMLElement or null.</span>
      <span class="token function-variable function">queryRef</span><span class="token operator">:</span> <span class="token punctuation">(</span>parent<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>HTMLElement<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Luckily there are helper functions available to easily define the refs without having to provide these complex objects yourself.</p>`,3),h=n("You can find more info at the "),y=n("Refs API"),f=s('<h3 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> setup</h3><div class="custom-container warning"><p class="custom-container-title">Readonly</p><p>The <code>props</code> object passed to the <code>setup</code> function is <strong>readonly</strong>, so it cannot be used to communicate back to the parent component or as initial state.</p></div><h3 id="lifecycle" tabindex="-1"><a class="header-anchor" href="#lifecycle" aria-hidden="true">#</a> lifecycle</h3>',3),g=n("See hooks"),v=s(`<h3 id="bindings" tabindex="-1"><a class="header-anchor" href="#bindings" aria-hidden="true">#</a> bindings</h3><h2 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> lazy</h2><p>Allows async loading of components when they are actually used, to be used in the <code>components</code> option of <code>defineComponent</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">lazy</span><span class="token punctuation">(</span>
  displayName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> ComponentFactory <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  componentName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ComponentFactory<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>See below for how to use it, and what makes it tick.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// MyLazyComponent.ts</span>
<span class="token comment">// In the component you want to lazy load, export a component definition</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@muban/muban&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> MyLazyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-lazy-component&#39;</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// in your &quot;parent&quot; component</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@muban/muban&#39;</span><span class="token punctuation">;</span>

<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// sync</span>
    SomeSyncComponent<span class="token punctuation">,</span>
    <span class="token comment">// The first parameter is the display name defined in the defineComponent function</span>
    <span class="token comment">// The second parameter is the async import of the lazy component file</span>
    <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token string">&#39;my-lazy-component&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./MyLazyComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Usually the exported component name is equal to the pascal cased version of the <code>name</code> passed to the defineComponent function, in the above example the exported const <code>MyLazyComponent</code> is the pascal cased version of <code>my-lazy-component</code></p><p>If your exported component name does not match the <code>name</code> given to the defineComponent function you should use the optional third parameter of the lazy function:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// MyLazyComponent.ts</span>

<span class="token comment">// In the component you want to lazy load, export a component definition</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@muban/muban&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Export here is \`LazyComponent\` instead of \`MyLazyComponent\` to not match convention,</span>
<span class="token comment">// which can be explicitly provided in the example below</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> LazyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-lazy-component&#39;</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// in your &quot;parent&quot; component</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@muban/muban&#39;</span><span class="token punctuation">;</span>

<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// sync</span>
    SomeSyncComponent<span class="token punctuation">,</span>
    <span class="token comment">/* 
    lazy will try to asynchronously import the named child component by converting the
    given displayName to pascal case, in this example it will look for MyLazyComponent
    inside the imported file &#39;./MyLazyComponent&#39;

    If the pascal cased displayName is different than the named export you can pass
    a third parameter with the name of the named export, in this case &#39;LazyComponent&#39;
    */</span>

    <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token string">&#39;my-lazy-component&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./MyLazyComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;LazyComponent&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">\`&#39;my-lazy-component&#39;\`</p><p>To know if the component should be loaded, the first <code>&#39;my-lazy-component&#39;</code> is needed to detect any <code>data-component</code> usages in the HTML. Only then the component is actually loaded.</p></div>`,12);function w(x,C){const a=o("RouterLink");return c(),l(r,null,[k,e("p",null,[m,p(a,{to:"/api/props.html"},{default:t(()=>[b]),_:1})]),d,e("p",null,[h,p(a,{to:"/api/refs.html"},{default:t(()=>[y]),_:1})]),f,e("p",null,[p(a,{to:"/api/hooks.html"},{default:t(()=>[g]),_:1})]),v],64)}var T=i(u,[["render",w]]);export{T as default};
