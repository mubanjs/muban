import{r as o,o as c,c as l,b as n,d as e,w as p,F as u,a,e as s}from"./app.7a437beb.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const r={},k=a(`<h1 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Compared to most known Frontend frameworks where everything is rendered on the client, and props are passed down parent to child to render the component, props in Muban work slightly different; In Muban, the HTML is the source of truth, so most of the props come out of your HTML.</p><p>While you can still pass props from parent to child components, the rendered HTML contains the initial state of all your components, so at some level, you always have to read those values from the HTML into component props. From there, your props start flowing into the rest of your application.</p><h3 id="initial-state" tabindex="-1"><a class="header-anchor" href="#initial-state" aria-hidden="true">#</a> Initial State</h3><p>So, how is this &quot;initial state&quot; stored inside the HTML, and how can we extract that to make it usable in our component? We can divide this up into 3 different categories:</p><ol><li><p><strong>Explicit state</strong> \u2013 stored in <code>data-attributes</code> or <code>&lt;script type=&quot;application/json&quot;&gt;</code>, that serves no function on the page for the user, but allows us to extract that state into our component without any ambiguity.</p></li><li><p><strong>Implicit state</strong> \u2013 stored in things like css <code>class</code> names or <code>html</code>/<code>text</code> on the page, that is already there to present to the user, and we can use as well to extract into our components. However, since they are meant for content or presentation, we need to be mindful when using them as our initial state, as they could change without us realizing.</p></li><li><p><strong>Input state</strong> \u2013 stored in elements that the user can interact with, like <code>input</code> elements. Often this state is extracted using specific 2-way-bindings instead of props. This type of state still needs some refinement to decide how or when to use props over bindings.</p></li></ol><h3 id="extraction" tabindex="-1"><a class="header-anchor" href="#extraction" aria-hidden="true">#</a> Extraction</h3><p>For extractions, we have different PropertySource functions that can extract information from different types of &quot;html&quot;. Most of them support converting the extract value into a specific data type (like booleans or numbers), and some of them can receive additional configuration to further fine tune the extraction behaviour.</p><p>Since <em>Explicit state</em> is only there to be extracted to the component, it always exists on the <code>data-component</code> element, and Muban is configured to extract this state in 3 different ways:</p><ul><li><p>The <code>data</code> source, using <code>data-attributes</code> on the root element, where the name of the prop specifies which data attribute to extract. A component prop <code>foo</code> will be extracted from <code>data-foo=&quot;bar&quot;</code>, and will get the value <code>&#39;bar&#39;</code>.</p></li><li><p>The <code>json</code> source, using a <code>&lt;script type=&quot;application/json&quot;&gt;</code> tag as a first-child of the root element, containing a JSON string that will be parsed into an object as a source for the properties. A component prop <code>foo</code> will be extracted from <code>&lt;script type=&quot;application/json&quot;&gt;{&quot;foo&quot;:&quot;bar&quot;}&lt;/script&gt;</code>, and will get the value <code>&#39;bar&#39;</code>.</p></li><li><p>The <code>css</code> source, using the <code>class</code> attribute on the root element, just for <code>Boolean</code> props, to see if a certain classname exists. A boolean component prop <code>isActive</code> will be extracted from <code>class=&quot;is-active&quot;</code> and will get the value <code>true</code>. Note that this is partially <em>Implicit state</em>, and because of that, by default it will only look for Boolean values on the root element.</p></li></ul><p><em>Implicit state</em> can be extracted from any element, and requires a bit more configuration to specify exactly what values you want to extract from where.</p><ul><li><p>The <code>data</code> and <code>json</code> sources can be explicitly configured, which is only useful if you want to target other elements beside the root element. They work exactly the same.</p></li><li><p>The <code>css</code> source allows for more options when configured as an explicit source, allowing the retrieval of more structured information based on the available css classes that exist on an element.</p></li><li><p>The <code>text</code> and <code>html</code> sources allow you to extract any text or html content from an element. The <code>text</code> source allows for value conversion into some of the basic data types as well.</p></li><li><p>The <code>attr</code> source is similar to the <code>data</code> source, but uses normal attributes to extract data from, and also allows conversion.</p></li><li><p>The <code>form</code> source allow you to extract <em>Input state</em> from form elements, when targeting an input it will extract the value, when targeting a form it will extract the FormData Object. It allows for value conversion into basic data types as well.</p></li></ul><p>Remember, the <code>form</code> binding will extract the value from form inputs, but most often you will end up using two-way bindings to manage syncing up these values with the internal component state.</p><h3 id="parent-components" tabindex="-1"><a class="header-anchor" href="#parent-components" aria-hidden="true">#</a> Parent components</h3><p>Props not only receive their value from extracted HTML state, but it can also come from parent components that pass values down. The extracted values are considered <strong>initial state</strong>, while the values passed from parent components can change over the application lifetime.</p><p>Please keep in mind that the value from the parent component will override the value that was extracted from the HTML, as bindings will be executed slightly later. Because of this, you have to make sure to read the child prop&#39;s value and using that as initial state of your binding.</p><p>By doing that, you&#39;re &quot;pulling&quot; ownership of that state from the child to the parent component, and the child component becomes &quot;stateless&quot;. It&#39;s important to always keep an eye out on where the initial state comes from, and who ends up managing that state at a later point.</p><h3 id="execution-order" tabindex="-1"><a class="header-anchor" href="#execution-order" aria-hidden="true">#</a> Execution order</h3><p>Related to the above, it&#39;s important to understand the execution order of different parts of the component creation.</p><p>Because parent components need to read the props of the child components as initial state that can be used in bindings on the child components, those child components and their props must be available in the <code>setup</code> function of the parent component.</p><p>This also means that the child component does not have access to the props of the parent component in their setup function, since the setup function of the parent component still needs to execute. Use <code>watch</code> or <code>watchEffect</code> if you need to know when they become available.</p><blockquote><p>TODO; link to full component lifecycle</p></blockquote><h3 id="read-only" tabindex="-1"><a class="header-anchor" href="#read-only" aria-hidden="true">#</a> Read Only</h3><p>The <code>props</code> object passed to the <code>setup</code> function is <strong>readonly</strong>, so it cannot be used to communicate back to the parent component or as initial state.</p><h2 id="prop-definition" tabindex="-1"><a class="header-anchor" href="#prop-definition" aria-hidden="true">#</a> Prop Definition</h2><p>Now that we know the concept about initial state, how it can exist in the rendered HTML, and what types of extraction we can use, let&#39;s see how we can configure this in our component.</p><h3 id="proptype" tabindex="-1"><a class="header-anchor" href="#proptype" aria-hidden="true">#</a> propType</h3><p>Let&#39;s start with simple example of how we can extract a data attribute on the root element.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> propType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@muban/muban&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// use this props object to define properties</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// &quot;foo&quot; is the name of the property we can use in our setup function</span>
    <span class="token comment">// &quot;propType.string&quot; will tell the component that this value will be a string</span>
    foo<span class="token operator">:</span> propType<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will output: &#39;bar&#39;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">data-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-component<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">&lt;!--</span> <span class="token attr-name">render</span> <span class="token attr-name">the</span> <span class="token attr-name">&quot;data-foo&quot;</span> <span class="token attr-name">attribute</span> <span class="token attr-name">with</span> <span class="token attr-name">the</span> <span class="token attr-name">&quot;bar&quot;</span> <span class="token attr-name">value</span> <span class="token attr-name">to</span> <span class="token attr-name">be</span> <span class="token attr-name">used</span> <span class="token attr-name">by</span> <span class="token attr-name">the</span> <span class="token attr-name">component</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>
  data-foo=&quot;bar&quot;
&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The <code>propType</code> object contains chainable properties and functions to help us configure how we extract and process each property.</p><p>When set to <code>string</code>, it doesn&#39;t have to do any processing, since almost everything in HTML is already a string. There are also values like <code>number</code> and <code>date</code> that allow conversions, <code>boolean</code> that is often used to check for the existence of something, and <code>array</code> and <code>object</code> to handle more complex data structures \u2013 often passed inside the json block.</p>`,33),d={class:"custom-container tip"},m=n("p",{class:"custom-container-title"},"API",-1),b=s("Read more on the "),h=s("props API"),f=s(" page."),g=a(`<h3 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> source</h3><p>Next up, let&#39;s use the existence of a css class to fill a boolean prop by using the <code>source</code> configuration.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> propType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@muban/muban&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span>
  refs<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// this ref is used in the prop definition as the &quot;target&quot;</span>
    content<span class="token operator">:</span> <span class="token function">refElement</span><span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// &quot;isExpanded&quot; will check the \`isExpanded\` and \`is-expanded\` css classes. </span>
    <span class="token comment">// &quot;propType.boolean&quot; will make sure to return a boolean when the css class exist</span>
    <span class="token comment">// the \`source\` function allows us to specifically configure where and how to extract</span>
    <span class="token comment">// - type:&#39;css&#39; will use the &quot;css&quot; source to check the &quot;class&quot; attribute</span>
    <span class="token comment">// - target:&#39;content&#39; will use the refs.content element to get the information from</span>
    isExpanded<span class="token operator">:</span> propType<span class="token punctuation">.</span><span class="token builtin">boolean</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will output: true</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>isExpanded<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- this data-ref is needed for the property source target --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>is-expanded<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    Content
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>The <code>source</code> helper allows you to configure the following:</p><ul><li>The <code>type</code> of source to use for extraction.</li><li>The <code>target</code> element (which uses the configured refs) from which to extract the value.</li><li>The <code>name</code> value to &quot;override&quot; the default property name as the value to look up. E.g. if the prop name is <code>isExpanded</code>, but the rendered css class is <code>expanded</code>, you can pass <code>name: &#39;expanded&#39;</code> to use that css class instead. The same is true for which <code>data-attribute</code> to use, or similar cases in other sources.</li><li>The <code>options</code> object which allows even further configuration, with options for specific sources.</li></ul><p>You could also pass an array of source configurations, they will be tried one by one and return the first non undefined value</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span>
  refs<span class="token operator">:</span> <span class="token punctuation">{</span>
    input<span class="token operator">:</span> <span class="token function">refElement</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> propType<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;attr&#39;</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token string">&#39;idnput&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// idnput target does not exist</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will output: value-from-data</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">data-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value-from-attr<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value-from-data<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The above example first tries to get the value from the attribute using the <code>attr</code> type, because the target element (idnput) does not exists it tries the second source configuration, that configuration uses the <code>data</code> type, and returns the value from the dataset.</p>`,10),y={class:"custom-container tip"},v=n("p",{class:"custom-container-title"},"API",-1),w=s("Read more on the "),x=s("source API"),q=s(" page."),_=a(`<h3 id="optional" tabindex="-1"><a class="header-anchor" href="#optional" aria-hidden="true">#</a> optional</h3><p>By default, all defined properties are required, and when they cannot be found (except for Booleans), a warning in the console will be logged, since you either made a mistake by not providing the state in the HTML, or you should have configured the prop to be optional.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> propType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@muban/muban&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// The \`.optional\` will tell the component that this value can be undefined</span>
    foo<span class="token operator">:</span> propType<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">.</span>optional<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will output: undefined</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- note that there is no \`data-foo\` present, so the prop will be undefined --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,4),T={class:"custom-container tip"},C=n("p",{class:"custom-container-title"},"API",-1),I=s("Read more on the "),M=s("optional API"),P=s(" page."),j=a(`<h3 id="defaultvalue" tabindex="-1"><a class="header-anchor" href="#defaultvalue" aria-hidden="true">#</a> defaultValue</h3><p>If you want to give the prop a default value when it&#39;s missing in the HTML, you can use <code>defaultValue</code> instead of <code>optional</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> propType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@muban/muban&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// The \`.defaultValue\` will tell the component to use &#39;bar&#39; when it&#39;s missing</span>
    foo<span class="token operator">:</span> propType<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will output the defautl value: &#39;bar&#39;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- note that there is no \`data-foo\` present, so the prop will get the default value --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Only one of <code>optional</code> or <code>defaultValue</code> should be used, defining them both doesn&#39;t do anything.</p></div>`,5),A={class:"custom-container tip"},E=n("p",{class:"custom-container-title"},"API",-1),L=s("Read more on the "),V=s("defaultValue API"),H=s(" page."),R=a(`<h3 id="validate" tabindex="-1"><a class="header-anchor" href="#validate" aria-hidden="true">#</a> validate</h3><p>If you want control of the exact value your properties can receive, you can use the <code>validate</code> function to pass a <code>Predicate</code> that will test if your value is valid.</p><p>A <code>Predicate</code> is a function that expects a value and returns a boolean. If false is returned, an error will be thrown that the property is invalid.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> propType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@muban/muban&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> either<span class="token punctuation">,</span> isPositive<span class="token punctuation">,</span> shape<span class="token punctuation">,</span> isString<span class="token punctuation">,</span> isNumber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;isntnt&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// str can only be &#39;foo&#39; or &#39;bar&#39;</span>
    str<span class="token operator">:</span> propType<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token function">either</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// num can only be a positive number</span>
    num<span class="token operator">:</span> propType<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>isPositive<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// obj must contain the foo and bar keys with their respective types</span>
    obj<span class="token operator">:</span> propType<span class="token punctuation">.</span>object<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> isString<span class="token punctuation">,</span> bar<span class="token operator">:</span> isNumber <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- note that there is no \`data-foo\` present, so the prop will get the default value --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-component<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-str</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-num</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>18<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>application/json<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;obj&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;bar&quot;</span><span class="token operator">:</span> <span class="token number">18</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  Content
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">Typing</p><p>Besides checking the validity of the value, it will also &quot;type&quot; the value based on the predicate. When using the <code>either(&#39;foo&#39;, &#39;bar&#39;)</code> predicate, the prop type will now be <code>&#39;foo&#39; | &#39;bar&#39;</code> instead of just <code>string</code>. The same works for objects when using the <code>shape</code> predicate.</p></div>`,6),B={class:"custom-container tip"},N=n("p",{class:"custom-container-title"},"API",-1),S=s("Read more on the "),O=s("validate API"),F=s(" page."),W=a(`<h3 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> functions</h3><p>With the <code>func</code> propType, we&#39;re moving out of the &quot;extraction&quot; props, and into passing prop values from parent components. More about that further down.</p><p>The function propType adds another method to be used, the <code>shape</code>. It allows you to define the shape of the passed function.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> propType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@muban/muban&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/runtime-core&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// The \`onChange\` props expects a function with the \`(value: string) =&gt; void\` shape </span>
    onChange<span class="token operator">:</span> propType<span class="token punctuation">.</span>func<span class="token punctuation">.</span>shape<span class="token operator">&lt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will always be undefined, since the parent bindings haven&#39;t been executed yet</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>onChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// watch for the onChange to become available</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>onChange<span class="token punctuation">,</span>
      <span class="token punctuation">(</span>onChange<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// now we can use it if we want to _directly_ execute it</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>onChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> refComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@muban/muban&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ParentComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;parent-component&#39;</span><span class="token punctuation">,</span>
  refs<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// get a reference to the child component</span>
    child<span class="token operator">:</span> <span class="token function">refComponent</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> refs <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token comment">// bind to the child component to pass props</span>
      <span class="token function">bind</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>child<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token comment">// pass a function to the onChange prop that will be executed when called from the child </span>
        <span class="token comment">// component, passing the &#39;value&#39;.</span>
        <span class="token function-variable function">onChange</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent-component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Parent content
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    Child content
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>There we can see we can <code>bind</code> to the <code>ref</code> of the child component, where we can pass any props that the component, in this case the <code>onChange</code> prop.</p><p>From the child component, we can call the <code>onChange</code> prop whenever it becomes available.</p>`,8),D={class:"custom-container tip"},z=n("p",{class:"custom-container-title"},"API",-1),J=s("Read more on the "),K=s("shape API"),U=s(" page."),Y=a(`<h2 id="parent-component" tabindex="-1"><a class="header-anchor" href="#parent-component" aria-hidden="true">#</a> Parent component</h2><h3 id="reading-props-from-parents" tabindex="-1"><a class="header-anchor" href="#reading-props-from-parents" aria-hidden="true">#</a> Reading props from parents</h3><p>Props that you want to receive from a parent component are defined the same way as props that you want to extract from the HTML, except that they should always be <code>optional</code> (unless you define a <code>defaultValue</code>), and should not define a <code>source</code>.</p><p>Initially their value is always undefined. Since the props object is reactive, reading individual props from that object will re-trigger if they are used in anything that can track reactivity, like a <code>computed</code> or a <code>watch</code>/<code>watchEffect</code>.</p><p>This means you can directly use this props in bindings (which will auto-update when those props change).</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Keep in mind that props are <strong>not</strong> two-way bindings, so writing to them will only effect the local component state.</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> propType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@muban/muban&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> watch<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/runtime-core&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// if this value comes from a parent component, it can be undefined</span>
    value<span class="token operator">:</span> propType<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">.</span>optional<span class="token punctuation">,</span>
    onChange<span class="token operator">:</span> propType<span class="token punctuation">.</span>func<span class="token punctuation">.</span>shape<span class="token operator">&lt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will always be undefined, since the parent bindings haven&#39;t been executed yet</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>onChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// same as this, unless extracted from the HTML.</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// watch for the onChange to become available</span>
    <span class="token comment">// this will not execute immediately, only when it changes</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>onChange<span class="token punctuation">,</span>
      <span class="token punctuation">(</span>onChange<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// now we can use it if we want to _directly_ execute it</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>onChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    <span class="token comment">// or using watchEffect to immediately execute logic and auto-track every dependency</span>
    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// this will log every time the value changes</span>
      <span class="token comment">// being undefined the first time this executes</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="reading-child-props-and-passing-them-back" tabindex="-1"><a class="header-anchor" href="#reading-child-props-and-passing-them-back" aria-hidden="true">#</a> Reading child props and passing them back</h3><p>As explained earlier, it&#39;s important to first read the child prop value and use that as the initial state of the bindings you set for that same prop, so you won&#39;t overwrite it.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> refComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@muban/muban&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ParentComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;parent-component&#39;</span><span class="token punctuation">,</span>
  refs<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// get a reference to the child component</span>
    child<span class="token operator">:</span> <span class="token function">refComponent</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> refs <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// using the ref, you can access the props of the child component</span>
    <span class="token comment">// if you&#39;re adding bindings to this same prop, you should always use</span>
    <span class="token comment">// this method to get the initial value of that prop</span>
    <span class="token keyword">const</span> someValue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>child<span class="token punctuation">.</span>component<span class="token punctuation">.</span>props<span class="token punctuation">.</span>value <span class="token operator">??</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token comment">// bind to the child component to pass props</span>
      <span class="token comment">// this bindings object is typed based on the props of the child component</span>
      <span class="token function">bind</span><span class="token punctuation">(</span>refs<span class="token punctuation">.</span>child<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token comment">// directly pass an existing \`ref\` or \`computed\`</span>
        value<span class="token operator">:</span> someValue<span class="token punctuation">,</span>
        
        <span class="token comment">// anything else can be wrapped inside a computed</span>
        value<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>someValue<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-bar</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
        <span class="token comment">// pass a function to the onChange prop that will be executed when called from the child </span>
        <span class="token comment">// component, passing the &#39;value&#39;.</span>
        <span class="token function-variable function">onChange</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// update the internal ref based on the child value, keeping things in sync</span>
          someValue<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>As you can see, we use the <code>refs.child</code> to get access to the <code>component</code> instance of that ref (which can be <code>undefined</code> if the element didn&#39;t exist in the DOM), and from there we can access the <code>props</code> of that component, which is filled with anything that was extracted from the html.</p>`,11);function $(G,Q){const t=o("RouterLink");return c(),l(u,null,[k,n("div",d,[m,n("p",null,[b,e(t,{to:"/api/props.html#proptype"},{default:p(()=>[h]),_:1}),f])]),g,n("div",y,[v,n("p",null,[w,e(t,{to:"/api/props.html#source"},{default:p(()=>[x]),_:1}),q])]),_,n("div",T,[C,n("p",null,[I,e(t,{to:"/api/props.html#optional"},{default:p(()=>[M]),_:1}),P])]),j,n("div",A,[E,n("p",null,[L,e(t,{to:"/api/props.html#defaultvalue"},{default:p(()=>[V]),_:1}),H])]),R,n("div",B,[N,n("p",null,[S,e(t,{to:"/api/props.html#validate"},{default:p(()=>[O]),_:1}),F])]),W,n("div",D,[z,n("p",null,[J,e(t,{to:"/api/props.html#shape"},{default:p(()=>[K]),_:1}),U])]),Y],64)}var nn=i(r,[["render",$]]);export{nn as default};
